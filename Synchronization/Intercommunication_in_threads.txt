package synchronization;
import java.util.Random;

public class bank {
    int balance;
    boolean busy = false;
    synchronized public boolean deposit(int amt){
        if(busy)
            try{
                wait();
            }catch(InterruptedException e){}
        balance+=amt;
        System.out.println("Deposit:"+amt);
        busy = true;
        notify();
        return true;
    }
    
    synchronized public boolean withdraw(int amt){
        if(!busy)
            try{
                wait();
            }catch(InterruptedException e){}
        balance-=amt;
        System.out.println("Withdrawal:"+amt);
        busy = false;
        notify();
        return true;
    }
}


//FATHER THRED

public class FatherThread extends Thread {
    bank b;
    int amt;
    public FatherThread(bank b){
        this.b = b; 
        start();
    }
    @Override
    public void run(){
        for(int i =1; i<=5; i++)
            b.deposit((int)(Math.random()*10000));
    }
}

//SON THREAD

public class SonThread extends Thread{
    bank b;
    int amt;
    public SonThread(bank b){
        this.b = b;
        start();
    }
    @Override
    public void run(){
        for(int i =1; i<=5; i++)
            b.withdraw((int)(Math.random()*5000));
    }
}


//EXECUTABLE CLASS

public class TransTest {
    public static void main(String args[]){
        
        bank b = new bank();
        FatherThread father = new FatherThread(b);
        SonThread son = new SonThread(b);
    }
}

//OUTPUT

/*run:
Deposit:456
Withdrawal:3973
Deposit:7055
Withdrawal:1527
Deposit:3199
Withdrawal:2610
Deposit:7041
Withdrawal:4519
Deposit:9790
Withdrawal:3594
BUILD SUCCESSFUL (total time: 0 seconds)
*/
